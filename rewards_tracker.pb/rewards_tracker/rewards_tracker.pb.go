// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: rewards_tracker.proto

package rewards_tracker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardCategory int32

const (
	CardCategory_GENERAL_SPENDING CardCategory = 0
	CardCategory_AIR_TICKETS      CardCategory = 1
	CardCategory_DONATIONS        CardCategory = 2
	CardCategory_DINING           CardCategory = 3
	CardCategory_EDUCATION        CardCategory = 4
	CardCategory_FOOD_DELIVERY    CardCategory = 5
	CardCategory_RIDE_HAILING     CardCategory = 6
	CardCategory_GROCERIES        CardCategory = 7
	CardCategory_HOTELS           CardCategory = 8
	CardCategory_HOSPITALS        CardCategory = 9
	CardCategory_INSURANCE        CardCategory = 10
	CardCategory_SHOPPING         CardCategory = 11
	CardCategory_PUBLIC_TRANSPORT CardCategory = 12
	CardCategory_TELCO            CardCategory = 13
	CardCategory_UTILITIES        CardCategory = 14
)

// Enum value maps for CardCategory.
var (
	CardCategory_name = map[int32]string{
		0:  "GENERAL_SPENDING",
		1:  "AIR_TICKETS",
		2:  "DONATIONS",
		3:  "DINING",
		4:  "EDUCATION",
		5:  "FOOD_DELIVERY",
		6:  "RIDE_HAILING",
		7:  "GROCERIES",
		8:  "HOTELS",
		9:  "HOSPITALS",
		10: "INSURANCE",
		11: "SHOPPING",
		12: "PUBLIC_TRANSPORT",
		13: "TELCO",
		14: "UTILITIES",
	}
	CardCategory_value = map[string]int32{
		"GENERAL_SPENDING": 0,
		"AIR_TICKETS":      1,
		"DONATIONS":        2,
		"DINING":           3,
		"EDUCATION":        4,
		"FOOD_DELIVERY":    5,
		"RIDE_HAILING":     6,
		"GROCERIES":        7,
		"HOTELS":           8,
		"HOSPITALS":        9,
		"INSURANCE":        10,
		"SHOPPING":         11,
		"PUBLIC_TRANSPORT": 12,
		"TELCO":            13,
		"UTILITIES":        14,
	}
)

func (x CardCategory) Enum() *CardCategory {
	p := new(CardCategory)
	*p = x
	return p
}

func (x CardCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[0].Descriptor()
}

func (CardCategory) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[0]
}

func (x CardCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardCategory.Descriptor instead.
func (CardCategory) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{0}
}

type CardPaymentType int32

const (
	CardPaymentType_CHIP        CardPaymentType = 0
	CardPaymentType_STRIPE      CardPaymentType = 1
	CardPaymentType_CONTACTLESS CardPaymentType = 2
	CardPaymentType_ONLINE      CardPaymentType = 3
)

// Enum value maps for CardPaymentType.
var (
	CardPaymentType_name = map[int32]string{
		0: "CHIP",
		1: "STRIPE",
		2: "CONTACTLESS",
		3: "ONLINE",
	}
	CardPaymentType_value = map[string]int32{
		"CHIP":        0,
		"STRIPE":      1,
		"CONTACTLESS": 2,
		"ONLINE":      3,
	}
)

func (x CardPaymentType) Enum() *CardPaymentType {
	p := new(CardPaymentType)
	*p = x
	return p
}

func (x CardPaymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardPaymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[1].Descriptor()
}

func (CardPaymentType) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[1]
}

func (x CardPaymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardPaymentType.Descriptor instead.
func (CardPaymentType) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{1}
}

type CardRounding int32

const (
	CardRounding_ROUND_DOWN CardRounding = 0
	CardRounding_ROUND      CardRounding = 1
)

// Enum value maps for CardRounding.
var (
	CardRounding_name = map[int32]string{
		0: "ROUND_DOWN",
		1: "ROUND",
	}
	CardRounding_value = map[string]int32{
		"ROUND_DOWN": 0,
		"ROUND":      1,
	}
)

func (x CardRounding) Enum() *CardRounding {
	p := new(CardRounding)
	*p = x
	return p
}

func (x CardRounding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardRounding) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[2].Descriptor()
}

func (CardRounding) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[2]
}

func (x CardRounding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardRounding.Descriptor instead.
func (CardRounding) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{2}
}

type CardCapType int32

const (
	CardCapType_NO_CAP          CardCapType = 0
	CardCapType_CALENDAR_MONTH  CardCapType = 1
	CardCapType_STATEMENT_MONTH CardCapType = 2
)

// Enum value maps for CardCapType.
var (
	CardCapType_name = map[int32]string{
		0: "NO_CAP",
		1: "CALENDAR_MONTH",
		2: "STATEMENT_MONTH",
	}
	CardCapType_value = map[string]int32{
		"NO_CAP":          0,
		"CALENDAR_MONTH":  1,
		"STATEMENT_MONTH": 2,
	}
)

func (x CardCapType) Enum() *CardCapType {
	p := new(CardCapType)
	*p = x
	return p
}

func (x CardCapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardCapType) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[3].Descriptor()
}

func (CardCapType) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[3]
}

func (x CardCapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardCapType.Descriptor instead.
func (CardCapType) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{3}
}

type RequestMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *string `protobuf:"bytes,1,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (x *RequestMeta) Reset() {
	*x = RequestMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMeta) ProtoMessage() {}

func (x *RequestMeta) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMeta.ProtoReflect.Descriptor instead.
func (*RequestMeta) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{0}
}

func (x *RequestMeta) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

type ResponseMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    *int64  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,oneof" json:"error_code,omitempty"`
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
}

func (x *ResponseMeta) Reset() {
	*x = ResponseMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMeta) ProtoMessage() {}

func (x *ResponseMeta) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMeta.ProtoReflect.Descriptor instead.
func (*ResponseMeta) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseMeta) GetErrorCode() int64 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *ResponseMeta) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type CardRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistCategories   []int64 `protobuf:"varint,1,rep,packed,name=whitelist_categories,json=whitelistCategories,proto3" json:"whitelist_categories,omitempty"`
	BlacklistCategories   []int64 `protobuf:"varint,2,rep,packed,name=blacklist_categories,json=blacklistCategories,proto3" json:"blacklist_categories,omitempty"`
	WhitelistPaymentTypes []int64 `protobuf:"varint,3,rep,packed,name=whitelist_payment_types,json=whitelistPaymentTypes,proto3" json:"whitelist_payment_types,omitempty"`
	BlacklistPaymentTypes []int64 `protobuf:"varint,4,rep,packed,name=blacklist_payment_types,json=blacklistPaymentTypes,proto3" json:"blacklist_payment_types,omitempty"`
}

func (x *CardRules) Reset() {
	*x = CardRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardRules) ProtoMessage() {}

func (x *CardRules) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardRules.ProtoReflect.Descriptor instead.
func (*CardRules) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{2}
}

func (x *CardRules) GetWhitelistCategories() []int64 {
	if x != nil {
		return x.WhitelistCategories
	}
	return nil
}

func (x *CardRules) GetBlacklistCategories() []int64 {
	if x != nil {
		return x.BlacklistCategories
	}
	return nil
}

func (x *CardRules) GetWhitelistPaymentTypes() []int64 {
	if x != nil {
		return x.WhitelistPaymentTypes
	}
	return nil
}

func (x *CardRules) GetBlacklistPaymentTypes() []int64 {
	if x != nil {
		return x.BlacklistPaymentTypes
	}
	return nil
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId              *int64     `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3,oneof" json:"card_id,omitempty"`
	CardName            *string    `protobuf:"bytes,2,opt,name=card_name,json=cardName,proto3,oneof" json:"card_name,omitempty"`
	ShortCardName       *string    `protobuf:"bytes,3,opt,name=short_card_name,json=shortCardName,proto3,oneof" json:"short_card_name,omitempty"`
	CardType            *int64     `protobuf:"varint,4,opt,name=card_type,json=cardType,proto3,oneof" json:"card_type,omitempty"`
	CardImage           *string    `protobuf:"bytes,5,opt,name=card_image,json=cardImage,proto3,oneof" json:"card_image,omitempty"`
	CardIssuer          *string    `protobuf:"bytes,6,opt,name=card_issuer,json=cardIssuer,proto3,oneof" json:"card_issuer,omitempty"`
	LocalBaseReward     *int64     `protobuf:"varint,7,opt,name=local_base_reward,json=localBaseReward,proto3,oneof" json:"local_base_reward,omitempty"`
	LocalBaseMiles      *float64   `protobuf:"fixed64,8,opt,name=local_base_miles,json=localBaseMiles,proto3,oneof" json:"local_base_miles,omitempty"`
	LocalBaseCardRules  *CardRules `protobuf:"bytes,9,opt,name=local_base_card_rules,json=localBaseCardRules,proto3,oneof" json:"local_base_card_rules,omitempty"`
	LocalBonusReward    *int64     `protobuf:"varint,10,opt,name=local_bonus_reward,json=localBonusReward,proto3,oneof" json:"local_bonus_reward,omitempty"`
	LocalBonusMiles     *float64   `protobuf:"fixed64,11,opt,name=local_bonus_miles,json=localBonusMiles,proto3,oneof" json:"local_bonus_miles,omitempty"`
	LocalBonusCardRules *CardRules `protobuf:"bytes,12,opt,name=local_bonus_card_rules,json=localBonusCardRules,proto3,oneof" json:"local_bonus_card_rules,omitempty"`
	FcyBaseReward       *int64     `protobuf:"varint,13,opt,name=fcy_base_reward,json=fcyBaseReward,proto3,oneof" json:"fcy_base_reward,omitempty"`
	FcyBaseMiles        *float64   `protobuf:"fixed64,14,opt,name=fcy_base_miles,json=fcyBaseMiles,proto3,oneof" json:"fcy_base_miles,omitempty"`
	FcyBaseCardRules    *CardRules `protobuf:"bytes,15,opt,name=fcy_base_card_rules,json=fcyBaseCardRules,proto3,oneof" json:"fcy_base_card_rules,omitempty"`
	FcyBonusReward      *int64     `protobuf:"varint,16,opt,name=fcy_bonus_reward,json=fcyBonusReward,proto3,oneof" json:"fcy_bonus_reward,omitempty"`
	FcyBonusMiles       *float64   `protobuf:"fixed64,17,opt,name=fcy_bonus_miles,json=fcyBonusMiles,proto3,oneof" json:"fcy_bonus_miles,omitempty"`
	FcyBonusCardRules   *CardRules `protobuf:"bytes,18,opt,name=fcy_bonus_card_rules,json=fcyBonusCardRules,proto3,oneof" json:"fcy_bonus_card_rules,omitempty"`
	Rounding            *int64     `protobuf:"varint,19,opt,name=rounding,proto3,oneof" json:"rounding,omitempty"`
	AmountBlock         *float64   `protobuf:"fixed64,20,opt,name=amount_block,json=amountBlock,proto3,oneof" json:"amount_block,omitempty"`
	RewardCurrency      *string    `protobuf:"bytes,21,opt,name=reward_currency,json=rewardCurrency,proto3,oneof" json:"reward_currency,omitempty"`
	CapType             *int64     `protobuf:"varint,22,opt,name=cap_type,json=capType,proto3,oneof" json:"cap_type,omitempty"`
	Cap                 *float64   `protobuf:"fixed64,23,opt,name=cap,proto3,oneof" json:"cap,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{3}
}

func (x *Card) GetCardId() int64 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *Card) GetCardName() string {
	if x != nil && x.CardName != nil {
		return *x.CardName
	}
	return ""
}

func (x *Card) GetShortCardName() string {
	if x != nil && x.ShortCardName != nil {
		return *x.ShortCardName
	}
	return ""
}

func (x *Card) GetCardType() int64 {
	if x != nil && x.CardType != nil {
		return *x.CardType
	}
	return 0
}

func (x *Card) GetCardImage() string {
	if x != nil && x.CardImage != nil {
		return *x.CardImage
	}
	return ""
}

func (x *Card) GetCardIssuer() string {
	if x != nil && x.CardIssuer != nil {
		return *x.CardIssuer
	}
	return ""
}

func (x *Card) GetLocalBaseReward() int64 {
	if x != nil && x.LocalBaseReward != nil {
		return *x.LocalBaseReward
	}
	return 0
}

func (x *Card) GetLocalBaseMiles() float64 {
	if x != nil && x.LocalBaseMiles != nil {
		return *x.LocalBaseMiles
	}
	return 0
}

func (x *Card) GetLocalBaseCardRules() *CardRules {
	if x != nil {
		return x.LocalBaseCardRules
	}
	return nil
}

func (x *Card) GetLocalBonusReward() int64 {
	if x != nil && x.LocalBonusReward != nil {
		return *x.LocalBonusReward
	}
	return 0
}

func (x *Card) GetLocalBonusMiles() float64 {
	if x != nil && x.LocalBonusMiles != nil {
		return *x.LocalBonusMiles
	}
	return 0
}

func (x *Card) GetLocalBonusCardRules() *CardRules {
	if x != nil {
		return x.LocalBonusCardRules
	}
	return nil
}

func (x *Card) GetFcyBaseReward() int64 {
	if x != nil && x.FcyBaseReward != nil {
		return *x.FcyBaseReward
	}
	return 0
}

func (x *Card) GetFcyBaseMiles() float64 {
	if x != nil && x.FcyBaseMiles != nil {
		return *x.FcyBaseMiles
	}
	return 0
}

func (x *Card) GetFcyBaseCardRules() *CardRules {
	if x != nil {
		return x.FcyBaseCardRules
	}
	return nil
}

func (x *Card) GetFcyBonusReward() int64 {
	if x != nil && x.FcyBonusReward != nil {
		return *x.FcyBonusReward
	}
	return 0
}

func (x *Card) GetFcyBonusMiles() float64 {
	if x != nil && x.FcyBonusMiles != nil {
		return *x.FcyBonusMiles
	}
	return 0
}

func (x *Card) GetFcyBonusCardRules() *CardRules {
	if x != nil {
		return x.FcyBonusCardRules
	}
	return nil
}

func (x *Card) GetRounding() int64 {
	if x != nil && x.Rounding != nil {
		return *x.Rounding
	}
	return 0
}

func (x *Card) GetAmountBlock() float64 {
	if x != nil && x.AmountBlock != nil {
		return *x.AmountBlock
	}
	return 0
}

func (x *Card) GetRewardCurrency() string {
	if x != nil && x.RewardCurrency != nil {
		return *x.RewardCurrency
	}
	return ""
}

func (x *Card) GetCapType() int64 {
	if x != nil && x.CapType != nil {
		return *x.CapType
	}
	return 0
}

func (x *Card) GetCap() float64 {
	if x != nil && x.Cap != nil {
		return *x.Cap
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *string `protobuf:"bytes,1,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Category    *int64  `protobuf:"varint,2,opt,name=category,proto3,oneof" json:"category,omitempty"`
	PaymentType *int64  `protobuf:"varint,3,opt,name=payment_type,json=paymentType,proto3,oneof" json:"payment_type,omitempty"`
	Amount      *int64  `protobuf:"varint,4,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Currency    *string `protobuf:"bytes,5,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Time        *int64  `protobuf:"varint,6,opt,name=time,proto3,oneof" json:"time,omitempty"`
	CardId      *int64  `protobuf:"varint,7,opt,name=cardId,proto3,oneof" json:"cardId,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{4}
}

func (x *Transaction) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Transaction) GetCategory() int64 {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return 0
}

func (x *Transaction) GetPaymentType() int64 {
	if x != nil && x.PaymentType != nil {
		return *x.PaymentType
	}
	return 0
}

func (x *Transaction) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *Transaction) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *Transaction) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *Transaction) GetCardId() int64 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

type AddTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta        *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	UserId             *int64       `protobuf:"varint,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	TransactionDetails *Transaction `protobuf:"bytes,3,opt,name=transaction_details,json=transactionDetails,proto3,oneof" json:"transaction_details,omitempty"`
}

func (x *AddTransactionRequest) Reset() {
	*x = AddTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransactionRequest) ProtoMessage() {}

func (x *AddTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransactionRequest.ProtoReflect.Descriptor instead.
func (*AddTransactionRequest) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{5}
}

func (x *AddTransactionRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *AddTransactionRequest) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *AddTransactionRequest) GetTransactionDetails() *Transaction {
	if x != nil {
		return x.TransactionDetails
	}
	return nil
}

type AddTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
}

func (x *AddTransactionResponse) Reset() {
	*x = AddTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransactionResponse) ProtoMessage() {}

func (x *AddTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransactionResponse.ProtoReflect.Descriptor instead.
func (*AddTransactionResponse) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{6}
}

func (x *AddTransactionResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

type PairUserCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	UserId      *int64       `protobuf:"varint,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	CardDetails *Card        `protobuf:"bytes,3,opt,name=card_details,json=cardDetails,proto3,oneof" json:"card_details,omitempty"`
}

func (x *PairUserCardRequest) Reset() {
	*x = PairUserCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairUserCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairUserCardRequest) ProtoMessage() {}

func (x *PairUserCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairUserCardRequest.ProtoReflect.Descriptor instead.
func (*PairUserCardRequest) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{7}
}

func (x *PairUserCardRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *PairUserCardRequest) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *PairUserCardRequest) GetCardDetails() *Card {
	if x != nil {
		return x.CardDetails
	}
	return nil
}

type PairUserCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardsList    []*Card       `protobuf:"bytes,1,rep,name=cards_list,json=cardsList,proto3" json:"cards_list,omitempty"`
	ResponseMeta *ResponseMeta `protobuf:"bytes,2,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
}

func (x *PairUserCardResponse) Reset() {
	*x = PairUserCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairUserCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairUserCardResponse) ProtoMessage() {}

func (x *PairUserCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairUserCardResponse.ProtoReflect.Descriptor instead.
func (*PairUserCardResponse) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{8}
}

func (x *PairUserCardResponse) GetCardsList() []*Card {
	if x != nil {
		return x.CardsList
	}
	return nil
}

func (x *PairUserCardResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

type AddCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	CardDetails *Card        `protobuf:"bytes,2,opt,name=card_details,json=cardDetails,proto3,oneof" json:"card_details,omitempty"`
}

func (x *AddCardRequest) Reset() {
	*x = AddCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCardRequest) ProtoMessage() {}

func (x *AddCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCardRequest.ProtoReflect.Descriptor instead.
func (*AddCardRequest) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{9}
}

func (x *AddCardRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *AddCardRequest) GetCardDetails() *Card {
	if x != nil {
		return x.CardDetails
	}
	return nil
}

type AddCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId       *int64        `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3,oneof" json:"card_id,omitempty"`
	ResponseMeta *ResponseMeta `protobuf:"bytes,2,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
}

func (x *AddCardResponse) Reset() {
	*x = AddCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCardResponse) ProtoMessage() {}

func (x *AddCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCardResponse.ProtoReflect.Descriptor instead.
func (*AddCardResponse) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{10}
}

func (x *AddCardResponse) GetCardId() int64 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *AddCardResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

var File_rewards_tracker_proto protoreflect.FileDescriptor

var file_rewards_tracker_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x22, 0x32, 0x0a, 0x0b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x7d, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe1,
	0x01, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x15, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0x8d, 0x0c, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x08, 0x63,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x06, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x07, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x69, 0x6c, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x48, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x0f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x57, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x0b,
	0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x63, 0x79, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x0c, 0x52, 0x0d, 0x66, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52,
	0x0c, 0x66, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x51, 0x0a, 0x13, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x0e, 0x52, 0x10,
	0x66, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f, 0x52,
	0x0e, 0x66, 0x63, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x0d, 0x66,
	0x63, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x53, 0x0a, 0x14, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x11, 0x52, 0x11,
	0x66, 0x63, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x12, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x0b, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x63,
	0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x15, 0x52,
	0x07, 0x63, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63,
	0x61, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x03, 0x63, 0x61, 0x70, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66,
	0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65,
	0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x63,
	0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x6c,
	0x65, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63,
	0x61, 0x70, 0x22, 0xcb, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x22, 0x8a, 0x02, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x55, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x02, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x76, 0x0a,
	0x16, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xec, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x69, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x69, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x0a, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x22, 0xbd, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x48, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48,
	0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x2a, 0xfb, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x49, 0x52, 0x5f, 0x54,
	0x49, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4f, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x52, 0x59, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x48, 0x41,
	0x49, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x52, 0x4f, 0x43, 0x45,
	0x52, 0x49, 0x45, 0x53, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x4f, 0x54, 0x45, 0x4c, 0x53,
	0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4f, 0x53, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x53, 0x10,
	0x09, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0a,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x4c, 0x43, 0x4f, 0x10, 0x0d, 0x12,
	0x0d, 0x0a, 0x09, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x0e, 0x2a, 0x44,
	0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48, 0x49, 0x50, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x52, 0x49, 0x50, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x43, 0x54, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49,
	0x4e, 0x45, 0x10, 0x03, 0x2a, 0x29, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x2a,
	0x42, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x50, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41,
	0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x10, 0x02, 0x42, 0x12, 0x5a, 0x10, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rewards_tracker_proto_rawDescOnce sync.Once
	file_rewards_tracker_proto_rawDescData = file_rewards_tracker_proto_rawDesc
)

func file_rewards_tracker_proto_rawDescGZIP() []byte {
	file_rewards_tracker_proto_rawDescOnce.Do(func() {
		file_rewards_tracker_proto_rawDescData = protoimpl.X.CompressGZIP(file_rewards_tracker_proto_rawDescData)
	})
	return file_rewards_tracker_proto_rawDescData
}

var file_rewards_tracker_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_rewards_tracker_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_rewards_tracker_proto_goTypes = []interface{}{
	(CardCategory)(0),              // 0: rewards_tracker.pb.CardCategory
	(CardPaymentType)(0),           // 1: rewards_tracker.pb.CardPaymentType
	(CardRounding)(0),              // 2: rewards_tracker.pb.CardRounding
	(CardCapType)(0),               // 3: rewards_tracker.pb.CardCapType
	(*RequestMeta)(nil),            // 4: rewards_tracker.pb.RequestMeta
	(*ResponseMeta)(nil),           // 5: rewards_tracker.pb.ResponseMeta
	(*CardRules)(nil),              // 6: rewards_tracker.pb.CardRules
	(*Card)(nil),                   // 7: rewards_tracker.pb.Card
	(*Transaction)(nil),            // 8: rewards_tracker.pb.Transaction
	(*AddTransactionRequest)(nil),  // 9: rewards_tracker.pb.AddTransactionRequest
	(*AddTransactionResponse)(nil), // 10: rewards_tracker.pb.AddTransactionResponse
	(*PairUserCardRequest)(nil),    // 11: rewards_tracker.pb.PairUserCardRequest
	(*PairUserCardResponse)(nil),   // 12: rewards_tracker.pb.PairUserCardResponse
	(*AddCardRequest)(nil),         // 13: rewards_tracker.pb.AddCardRequest
	(*AddCardResponse)(nil),        // 14: rewards_tracker.pb.AddCardResponse
}
var file_rewards_tracker_proto_depIdxs = []int32{
	6,  // 0: rewards_tracker.pb.Card.local_base_card_rules:type_name -> rewards_tracker.pb.CardRules
	6,  // 1: rewards_tracker.pb.Card.local_bonus_card_rules:type_name -> rewards_tracker.pb.CardRules
	6,  // 2: rewards_tracker.pb.Card.fcy_base_card_rules:type_name -> rewards_tracker.pb.CardRules
	6,  // 3: rewards_tracker.pb.Card.fcy_bonus_card_rules:type_name -> rewards_tracker.pb.CardRules
	4,  // 4: rewards_tracker.pb.AddTransactionRequest.request_meta:type_name -> rewards_tracker.pb.RequestMeta
	8,  // 5: rewards_tracker.pb.AddTransactionRequest.transaction_details:type_name -> rewards_tracker.pb.Transaction
	5,  // 6: rewards_tracker.pb.AddTransactionResponse.response_meta:type_name -> rewards_tracker.pb.ResponseMeta
	4,  // 7: rewards_tracker.pb.PairUserCardRequest.request_meta:type_name -> rewards_tracker.pb.RequestMeta
	7,  // 8: rewards_tracker.pb.PairUserCardRequest.card_details:type_name -> rewards_tracker.pb.Card
	7,  // 9: rewards_tracker.pb.PairUserCardResponse.cards_list:type_name -> rewards_tracker.pb.Card
	5,  // 10: rewards_tracker.pb.PairUserCardResponse.response_meta:type_name -> rewards_tracker.pb.ResponseMeta
	4,  // 11: rewards_tracker.pb.AddCardRequest.request_meta:type_name -> rewards_tracker.pb.RequestMeta
	7,  // 12: rewards_tracker.pb.AddCardRequest.card_details:type_name -> rewards_tracker.pb.Card
	5,  // 13: rewards_tracker.pb.AddCardResponse.response_meta:type_name -> rewards_tracker.pb.ResponseMeta
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_rewards_tracker_proto_init() }
func file_rewards_tracker_proto_init() {
	if File_rewards_tracker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rewards_tracker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairUserCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairUserCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rewards_tracker_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rewards_tracker_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rewards_tracker_proto_goTypes,
		DependencyIndexes: file_rewards_tracker_proto_depIdxs,
		EnumInfos:         file_rewards_tracker_proto_enumTypes,
		MessageInfos:      file_rewards_tracker_proto_msgTypes,
	}.Build()
	File_rewards_tracker_proto = out.File
	file_rewards_tracker_proto_rawDesc = nil
	file_rewards_tracker_proto_goTypes = nil
	file_rewards_tracker_proto_depIdxs = nil
}
