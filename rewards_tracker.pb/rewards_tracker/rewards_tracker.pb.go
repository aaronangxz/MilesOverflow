// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: rewards_tracker.proto

package rewards_tracker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardCategory int32

const (
	CardCategory_GENERAL_SPENDING CardCategory = 0
	CardCategory_AIR_TICKETS      CardCategory = 1
	CardCategory_DONATIONS        CardCategory = 2
	CardCategory_DINING           CardCategory = 3
	CardCategory_EDUCATION        CardCategory = 4
	CardCategory_FOOD_DELIVERY    CardCategory = 5
	CardCategory_RIDE_HAILING     CardCategory = 6
	CardCategory_GROCERIES        CardCategory = 7
	CardCategory_HOTELS           CardCategory = 8
	CardCategory_HOSPITALS        CardCategory = 9
	CardCategory_INSURANCE        CardCategory = 10
	CardCategory_SHOPPING         CardCategory = 11
	CardCategory_PUBLIC_TRANSPORT CardCategory = 12
	CardCategory_TELCO            CardCategory = 13
	CardCategory_UTILITIES        CardCategory = 14
)

// Enum value maps for CardCategory.
var (
	CardCategory_name = map[int32]string{
		0:  "GENERAL_SPENDING",
		1:  "AIR_TICKETS",
		2:  "DONATIONS",
		3:  "DINING",
		4:  "EDUCATION",
		5:  "FOOD_DELIVERY",
		6:  "RIDE_HAILING",
		7:  "GROCERIES",
		8:  "HOTELS",
		9:  "HOSPITALS",
		10: "INSURANCE",
		11: "SHOPPING",
		12: "PUBLIC_TRANSPORT",
		13: "TELCO",
		14: "UTILITIES",
	}
	CardCategory_value = map[string]int32{
		"GENERAL_SPENDING": 0,
		"AIR_TICKETS":      1,
		"DONATIONS":        2,
		"DINING":           3,
		"EDUCATION":        4,
		"FOOD_DELIVERY":    5,
		"RIDE_HAILING":     6,
		"GROCERIES":        7,
		"HOTELS":           8,
		"HOSPITALS":        9,
		"INSURANCE":        10,
		"SHOPPING":         11,
		"PUBLIC_TRANSPORT": 12,
		"TELCO":            13,
		"UTILITIES":        14,
	}
)

func (x CardCategory) Enum() *CardCategory {
	p := new(CardCategory)
	*p = x
	return p
}

func (x CardCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[0].Descriptor()
}

func (CardCategory) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[0]
}

func (x CardCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardCategory.Descriptor instead.
func (CardCategory) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{0}
}

type CardPaymentType int32

const (
	CardPaymentType_CHIP        CardPaymentType = 0
	CardPaymentType_STRIPE      CardPaymentType = 1
	CardPaymentType_CONTACTLESS CardPaymentType = 2
	CardPaymentType_ONLINE      CardPaymentType = 3
)

// Enum value maps for CardPaymentType.
var (
	CardPaymentType_name = map[int32]string{
		0: "CHIP",
		1: "STRIPE",
		2: "CONTACTLESS",
		3: "ONLINE",
	}
	CardPaymentType_value = map[string]int32{
		"CHIP":        0,
		"STRIPE":      1,
		"CONTACTLESS": 2,
		"ONLINE":      3,
	}
)

func (x CardPaymentType) Enum() *CardPaymentType {
	p := new(CardPaymentType)
	*p = x
	return p
}

func (x CardPaymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardPaymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[1].Descriptor()
}

func (CardPaymentType) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[1]
}

func (x CardPaymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardPaymentType.Descriptor instead.
func (CardPaymentType) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{1}
}

type CardRounding int32

const (
	CardRounding_ROUND_DOWN CardRounding = 0
	CardRounding_ROUND      CardRounding = 1
)

// Enum value maps for CardRounding.
var (
	CardRounding_name = map[int32]string{
		0: "ROUND_DOWN",
		1: "ROUND",
	}
	CardRounding_value = map[string]int32{
		"ROUND_DOWN": 0,
		"ROUND":      1,
	}
)

func (x CardRounding) Enum() *CardRounding {
	p := new(CardRounding)
	*p = x
	return p
}

func (x CardRounding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardRounding) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[2].Descriptor()
}

func (CardRounding) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[2]
}

func (x CardRounding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardRounding.Descriptor instead.
func (CardRounding) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{2}
}

type CardCapType int32

const (
	CardCapType_NO_CAP          CardCapType = 0
	CardCapType_CALENDAR_MONTH  CardCapType = 1
	CardCapType_STATEMENT_MONTH CardCapType = 2
)

// Enum value maps for CardCapType.
var (
	CardCapType_name = map[int32]string{
		0: "NO_CAP",
		1: "CALENDAR_MONTH",
		2: "STATEMENT_MONTH",
	}
	CardCapType_value = map[string]int32{
		"NO_CAP":          0,
		"CALENDAR_MONTH":  1,
		"STATEMENT_MONTH": 2,
	}
)

func (x CardCapType) Enum() *CardCapType {
	p := new(CardCapType)
	*p = x
	return p
}

func (x CardCapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardCapType) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[3].Descriptor()
}

func (CardCapType) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[3]
}

func (x CardCapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardCapType.Descriptor instead.
func (CardCapType) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{3}
}

type CardType int32

const (
	CardType_CREDIT_CARD CardType = 0
	CardType_CHARGE_CARD CardType = 1
	CardType_DEBIT_CARD  CardType = 2
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0: "CREDIT_CARD",
		1: "CHARGE_CARD",
		2: "DEBIT_CARD",
	}
	CardType_value = map[string]int32{
		"CREDIT_CARD": 0,
		"CHARGE_CARD": 1,
		"DEBIT_CARD":  2,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[4].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[4]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{4}
}

type OrderBy int32

const (
	OrderBy_ASC  OrderBy = 0
	OrderBy_DESC OrderBy = 1
)

// Enum value maps for OrderBy.
var (
	OrderBy_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	OrderBy_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x OrderBy) Enum() *OrderBy {
	p := new(OrderBy)
	*p = x
	return p
}

func (x OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[5].Descriptor()
}

func (OrderBy) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[5]
}

func (x OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBy.Descriptor instead.
func (OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{5}
}

type ErrorCode int32

const (
	ErrorCode_ERROR_OK        ErrorCode = 0
	ErrorCode_ERROR_PARAMS    ErrorCode = 1
	ErrorCode_ERROR_JSON_BIND ErrorCode = 2
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_OK",
		1: "ERROR_PARAMS",
		2: "ERROR_JSON_BIND",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_OK":        0,
		"ERROR_PARAMS":    1,
		"ERROR_JSON_BIND": 2,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[6].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[6]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{6}
}

type User_ErrorCode int32

const (
	User_ERROR_OK              User_ErrorCode = 0
	User_ERROR_USER_NOT_EXISTS User_ErrorCode = 1
)

// Enum value maps for User_ErrorCode.
var (
	User_ErrorCode_name = map[int32]string{
		0: "ERROR_OK",
		1: "ERROR_USER_NOT_EXISTS",
	}
	User_ErrorCode_value = map[string]int32{
		"ERROR_OK":              0,
		"ERROR_USER_NOT_EXISTS": 1,
	}
)

func (x User_ErrorCode) Enum() *User_ErrorCode {
	p := new(User_ErrorCode)
	*p = x
	return p
}

func (x User_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[7].Descriptor()
}

func (User_ErrorCode) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[7]
}

func (x User_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_ErrorCode.Descriptor instead.
func (User_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{3, 0}
}

type UserCard_CardStatus int32

const (
	UserCard_CARD_ACTIVE   UserCard_CardStatus = 0
	UserCard_CARD_INACTIVE UserCard_CardStatus = 1
	UserCard_CARD_UNKNOWN  UserCard_CardStatus = 3
)

// Enum value maps for UserCard_CardStatus.
var (
	UserCard_CardStatus_name = map[int32]string{
		0: "CARD_ACTIVE",
		1: "CARD_INACTIVE",
		3: "CARD_UNKNOWN",
	}
	UserCard_CardStatus_value = map[string]int32{
		"CARD_ACTIVE":   0,
		"CARD_INACTIVE": 1,
		"CARD_UNKNOWN":  3,
	}
)

func (x UserCard_CardStatus) Enum() *UserCard_CardStatus {
	p := new(UserCard_CardStatus)
	*p = x
	return p
}

func (x UserCard_CardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserCard_CardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[8].Descriptor()
}

func (UserCard_CardStatus) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[8]
}

func (x UserCard_CardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserCard_CardStatus.Descriptor instead.
func (UserCard_CardStatus) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{8, 0}
}

type CalculateTransactionRequest_ErrorCode int32

const (
	CalculateTransactionRequest_ERROR_SUCCESS CalculateTransactionRequest_ErrorCode = 0
	CalculateTransactionRequest_ERROR_FAILED  CalculateTransactionRequest_ErrorCode = 1
)

// Enum value maps for CalculateTransactionRequest_ErrorCode.
var (
	CalculateTransactionRequest_ErrorCode_name = map[int32]string{
		0: "ERROR_SUCCESS",
		1: "ERROR_FAILED",
	}
	CalculateTransactionRequest_ErrorCode_value = map[string]int32{
		"ERROR_SUCCESS": 0,
		"ERROR_FAILED":  1,
	}
)

func (x CalculateTransactionRequest_ErrorCode) Enum() *CalculateTransactionRequest_ErrorCode {
	p := new(CalculateTransactionRequest_ErrorCode)
	*p = x
	return p
}

func (x CalculateTransactionRequest_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CalculateTransactionRequest_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[9].Descriptor()
}

func (CalculateTransactionRequest_ErrorCode) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[9]
}

func (x CalculateTransactionRequest_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CalculateTransactionRequest_ErrorCode.Descriptor instead.
func (CalculateTransactionRequest_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{15, 0}
}

type PairUserCardRequest_ErrorCode int32

const (
	PairUserCardRequest_ERROR_SUCCESS          PairUserCardRequest_ErrorCode = 0
	PairUserCardRequest_ERROR_CARD_PAIR_EXISTS PairUserCardRequest_ErrorCode = 1
	PairUserCardRequest_ERROR_CARD_NOT_EXISTS  PairUserCardRequest_ErrorCode = 2
	PairUserCardRequest_ERROR_FAILED           PairUserCardRequest_ErrorCode = 3
)

// Enum value maps for PairUserCardRequest_ErrorCode.
var (
	PairUserCardRequest_ErrorCode_name = map[int32]string{
		0: "ERROR_SUCCESS",
		1: "ERROR_CARD_PAIR_EXISTS",
		2: "ERROR_CARD_NOT_EXISTS",
		3: "ERROR_FAILED",
	}
	PairUserCardRequest_ErrorCode_value = map[string]int32{
		"ERROR_SUCCESS":          0,
		"ERROR_CARD_PAIR_EXISTS": 1,
		"ERROR_CARD_NOT_EXISTS":  2,
		"ERROR_FAILED":           3,
	}
)

func (x PairUserCardRequest_ErrorCode) Enum() *PairUserCardRequest_ErrorCode {
	p := new(PairUserCardRequest_ErrorCode)
	*p = x
	return p
}

func (x PairUserCardRequest_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PairUserCardRequest_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[10].Descriptor()
}

func (PairUserCardRequest_ErrorCode) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[10]
}

func (x PairUserCardRequest_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PairUserCardRequest_ErrorCode.Descriptor instead.
func (PairUserCardRequest_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{17, 0}
}

type GetUserCardsRequest_ErrorCode int32

const (
	GetUserCardsRequest_ERROR_SUCCESS GetUserCardsRequest_ErrorCode = 0
	GetUserCardsRequest_ERROR_FAILED  GetUserCardsRequest_ErrorCode = 1
)

// Enum value maps for GetUserCardsRequest_ErrorCode.
var (
	GetUserCardsRequest_ErrorCode_name = map[int32]string{
		0: "ERROR_SUCCESS",
		1: "ERROR_FAILED",
	}
	GetUserCardsRequest_ErrorCode_value = map[string]int32{
		"ERROR_SUCCESS": 0,
		"ERROR_FAILED":  1,
	}
)

func (x GetUserCardsRequest_ErrorCode) Enum() *GetUserCardsRequest_ErrorCode {
	p := new(GetUserCardsRequest_ErrorCode)
	*p = x
	return p
}

func (x GetUserCardsRequest_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserCardsRequest_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[11].Descriptor()
}

func (GetUserCardsRequest_ErrorCode) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[11]
}

func (x GetUserCardsRequest_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserCardsRequest_ErrorCode.Descriptor instead.
func (GetUserCardsRequest_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{20, 0}
}

type GetUserCardsRequest_OrderByField int32

const (
	GetUserCardsRequest_USER_CARD_ADDED_TIME GetUserCardsRequest_OrderByField = 0
	GetUserCardsRequest_USER_CARD_EXPIRY     GetUserCardsRequest_OrderByField = 1
	GetUserCardsRequest_USER_CARD_NICKNAME   GetUserCardsRequest_OrderByField = 2
)

// Enum value maps for GetUserCardsRequest_OrderByField.
var (
	GetUserCardsRequest_OrderByField_name = map[int32]string{
		0: "USER_CARD_ADDED_TIME",
		1: "USER_CARD_EXPIRY",
		2: "USER_CARD_NICKNAME",
	}
	GetUserCardsRequest_OrderByField_value = map[string]int32{
		"USER_CARD_ADDED_TIME": 0,
		"USER_CARD_EXPIRY":     1,
		"USER_CARD_NICKNAME":   2,
	}
)

func (x GetUserCardsRequest_OrderByField) Enum() *GetUserCardsRequest_OrderByField {
	p := new(GetUserCardsRequest_OrderByField)
	*p = x
	return p
}

func (x GetUserCardsRequest_OrderByField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserCardsRequest_OrderByField) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[12].Descriptor()
}

func (GetUserCardsRequest_OrderByField) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[12]
}

func (x GetUserCardsRequest_OrderByField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserCardsRequest_OrderByField.Descriptor instead.
func (GetUserCardsRequest_OrderByField) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{20, 1}
}

type AddCardRequest_ErrorCode int32

const (
	AddCardRequest_ERROR_SUCCESS     AddCardRequest_ErrorCode = 0
	AddCardRequest_ERROR_CARD_EXISTS AddCardRequest_ErrorCode = 1
	AddCardRequest_ERROR_FAILED      AddCardRequest_ErrorCode = 2
)

// Enum value maps for AddCardRequest_ErrorCode.
var (
	AddCardRequest_ErrorCode_name = map[int32]string{
		0: "ERROR_SUCCESS",
		1: "ERROR_CARD_EXISTS",
		2: "ERROR_FAILED",
	}
	AddCardRequest_ErrorCode_value = map[string]int32{
		"ERROR_SUCCESS":     0,
		"ERROR_CARD_EXISTS": 1,
		"ERROR_FAILED":      2,
	}
)

func (x AddCardRequest_ErrorCode) Enum() *AddCardRequest_ErrorCode {
	p := new(AddCardRequest_ErrorCode)
	*p = x
	return p
}

func (x AddCardRequest_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddCardRequest_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_rewards_tracker_proto_enumTypes[13].Descriptor()
}

func (AddCardRequest_ErrorCode) Type() protoreflect.EnumType {
	return &file_rewards_tracker_proto_enumTypes[13]
}

func (x AddCardRequest_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddCardRequest_ErrorCode.Descriptor instead.
func (AddCardRequest_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{22, 0}
}

type RequestMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *string `protobuf:"bytes,1,opt,name=token,proto3,oneof" json:"token,omitempty"`
}

func (x *RequestMeta) Reset() {
	*x = RequestMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMeta) ProtoMessage() {}

func (x *RequestMeta) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMeta.ProtoReflect.Descriptor instead.
func (*RequestMeta) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{0}
}

func (x *RequestMeta) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

type GenericResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
}

func (x *GenericResponse) Reset() {
	*x = GenericResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericResponse) ProtoMessage() {}

func (x *GenericResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericResponse.ProtoReflect.Descriptor instead.
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{1}
}

func (x *GenericResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

type ResponseMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    *int64  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,oneof" json:"error_code,omitempty"`
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
}

func (x *ResponseMeta) Reset() {
	*x = ResponseMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMeta) ProtoMessage() {}

func (x *ResponseMeta) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMeta.ProtoReflect.Descriptor instead.
func (*ResponseMeta) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{2}
}

func (x *ResponseMeta) GetErrorCode() int64 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *ResponseMeta) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    *int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	UserName  *string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`
	Timestamp *int64  `protobuf:"varint,3,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *User) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *User) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type Lists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []int64 `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
}

func (x *Lists) Reset() {
	*x = Lists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lists) ProtoMessage() {}

func (x *Lists) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lists.ProtoReflect.Descriptor instead.
func (*Lists) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{4}
}

func (x *Lists) GetList() []int64 {
	if x != nil {
		return x.List
	}
	return nil
}

type CardRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhitelistCategories   *Lists `protobuf:"bytes,1,opt,name=whitelist_categories,json=whitelistCategories,proto3,oneof" json:"whitelist_categories,omitempty"`
	BlacklistCategories   *Lists `protobuf:"bytes,2,opt,name=blacklist_categories,json=blacklistCategories,proto3,oneof" json:"blacklist_categories,omitempty"`
	WhitelistPaymentTypes *Lists `protobuf:"bytes,3,opt,name=whitelist_payment_types,json=whitelistPaymentTypes,proto3,oneof" json:"whitelist_payment_types,omitempty"`
	BlacklistPaymentTypes *Lists `protobuf:"bytes,4,opt,name=blacklist_payment_types,json=blacklistPaymentTypes,proto3,oneof" json:"blacklist_payment_types,omitempty"`
}

func (x *CardRules) Reset() {
	*x = CardRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardRules) ProtoMessage() {}

func (x *CardRules) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardRules.ProtoReflect.Descriptor instead.
func (*CardRules) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{5}
}

func (x *CardRules) GetWhitelistCategories() *Lists {
	if x != nil {
		return x.WhitelistCategories
	}
	return nil
}

func (x *CardRules) GetBlacklistCategories() *Lists {
	if x != nil {
		return x.BlacklistCategories
	}
	return nil
}

func (x *CardRules) GetWhitelistPaymentTypes() *Lists {
	if x != nil {
		return x.WhitelistPaymentTypes
	}
	return nil
}

func (x *CardRules) GetBlacklistPaymentTypes() *Lists {
	if x != nil {
		return x.BlacklistPaymentTypes
	}
	return nil
}

type CardDb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId                      *int64   `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3,oneof" json:"card_id,omitempty"`
	CardName                    *string  `protobuf:"bytes,2,opt,name=card_name,json=cardName,proto3,oneof" json:"card_name,omitempty"`
	ShortCardName               *string  `protobuf:"bytes,3,opt,name=short_card_name,json=shortCardName,proto3,oneof" json:"short_card_name,omitempty"`
	CardType                    *int64   `protobuf:"varint,4,opt,name=card_type,json=cardType,proto3,oneof" json:"card_type,omitempty"`
	CardImage                   *string  `protobuf:"bytes,5,opt,name=card_image,json=cardImage,proto3,oneof" json:"card_image,omitempty"`
	CardIssuer                  *string  `protobuf:"bytes,6,opt,name=card_issuer,json=cardIssuer,proto3,oneof" json:"card_issuer,omitempty"`
	LocalBaseRewards            *int64   `protobuf:"varint,7,opt,name=local_base_rewards,json=localBaseRewards,proto3,oneof" json:"local_base_rewards,omitempty"`
	LocalBaseMiles              *float64 `protobuf:"fixed64,8,opt,name=local_base_miles,json=localBaseMiles,proto3,oneof" json:"local_base_miles,omitempty"`
	LocalBaseWhitelistCategory  []byte   `protobuf:"bytes,9,opt,name=local_base_whitelist_category,json=localBaseWhitelistCategory,proto3,oneof" json:"local_base_whitelist_category,omitempty"`
	LocalBaseBlacklistCategory  []byte   `protobuf:"bytes,10,opt,name=local_base_blacklist_category,json=localBaseBlacklistCategory,proto3,oneof" json:"local_base_blacklist_category,omitempty"`
	LocalBonusRewards           *int64   `protobuf:"varint,11,opt,name=local_bonus_rewards,json=localBonusRewards,proto3,oneof" json:"local_bonus_rewards,omitempty"`
	LocalBonusMiles             *float64 `protobuf:"fixed64,12,opt,name=local_bonus_miles,json=localBonusMiles,proto3,oneof" json:"local_bonus_miles,omitempty"`
	LocalBonusWhitelistCategory []byte   `protobuf:"bytes,13,opt,name=local_bonus_whitelist_category,json=localBonusWhitelistCategory,proto3,oneof" json:"local_bonus_whitelist_category,omitempty"`
	LocalBonusBlacklistCategory []byte   `protobuf:"bytes,14,opt,name=local_bonus_blacklist_category,json=localBonusBlacklistCategory,proto3,oneof" json:"local_bonus_blacklist_category,omitempty"`
	LocalBonusPaymentTypes      []byte   `protobuf:"bytes,15,opt,name=local_bonus_payment_types,json=localBonusPaymentTypes,proto3,oneof" json:"local_bonus_payment_types,omitempty"`
	FcyBaseRewards              *int64   `protobuf:"varint,16,opt,name=fcy_base_rewards,json=fcyBaseRewards,proto3,oneof" json:"fcy_base_rewards,omitempty"`
	FcyBaseMiles                *float64 `protobuf:"fixed64,17,opt,name=fcy_base_miles,json=fcyBaseMiles,proto3,oneof" json:"fcy_base_miles,omitempty"`
	FcyBaseWhitelistCategory    []byte   `protobuf:"bytes,18,opt,name=fcy_base_whitelist_category,json=fcyBaseWhitelistCategory,proto3,oneof" json:"fcy_base_whitelist_category,omitempty"`
	FcyBaseBlacklistCategory    []byte   `protobuf:"bytes,19,opt,name=fcy_base_blacklist_category,json=fcyBaseBlacklistCategory,proto3,oneof" json:"fcy_base_blacklist_category,omitempty"`
	FcyBonusRewards             *int64   `protobuf:"varint,20,opt,name=fcy_bonus_rewards,json=fcyBonusRewards,proto3,oneof" json:"fcy_bonus_rewards,omitempty"`
	FcyBonusMiles               *float64 `protobuf:"fixed64,21,opt,name=fcy_bonus_miles,json=fcyBonusMiles,proto3,oneof" json:"fcy_bonus_miles,omitempty"`
	FcyBonusWhitelistCategory   []byte   `protobuf:"bytes,22,opt,name=fcy_bonus_whitelist_category,json=fcyBonusWhitelistCategory,proto3,oneof" json:"fcy_bonus_whitelist_category,omitempty"`
	FcyBonusBlacklistCategory   []byte   `protobuf:"bytes,23,opt,name=fcy_bonus_blacklist_category,json=fcyBonusBlacklistCategory,proto3,oneof" json:"fcy_bonus_blacklist_category,omitempty"`
	FcyBonusPaymentTypes        []byte   `protobuf:"bytes,24,opt,name=fcy_bonus_payment_types,json=fcyBonusPaymentTypes,proto3,oneof" json:"fcy_bonus_payment_types,omitempty"`
	Rounding                    *int64   `protobuf:"varint,25,opt,name=rounding,proto3,oneof" json:"rounding,omitempty"`
	AmountBlock                 *float64 `protobuf:"fixed64,26,opt,name=amount_block,json=amountBlock,proto3,oneof" json:"amount_block,omitempty"`
	RewardCurrency              *string  `protobuf:"bytes,27,opt,name=reward_currency,json=rewardCurrency,proto3,oneof" json:"reward_currency,omitempty"`
	CapType                     *int64   `protobuf:"varint,28,opt,name=cap_type,json=capType,proto3,oneof" json:"cap_type,omitempty"`
	Cap                         *float64 `protobuf:"fixed64,29,opt,name=cap,proto3,oneof" json:"cap,omitempty"`
}

func (x *CardDb) Reset() {
	*x = CardDb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardDb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardDb) ProtoMessage() {}

func (x *CardDb) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardDb.ProtoReflect.Descriptor instead.
func (*CardDb) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{6}
}

func (x *CardDb) GetCardId() int64 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *CardDb) GetCardName() string {
	if x != nil && x.CardName != nil {
		return *x.CardName
	}
	return ""
}

func (x *CardDb) GetShortCardName() string {
	if x != nil && x.ShortCardName != nil {
		return *x.ShortCardName
	}
	return ""
}

func (x *CardDb) GetCardType() int64 {
	if x != nil && x.CardType != nil {
		return *x.CardType
	}
	return 0
}

func (x *CardDb) GetCardImage() string {
	if x != nil && x.CardImage != nil {
		return *x.CardImage
	}
	return ""
}

func (x *CardDb) GetCardIssuer() string {
	if x != nil && x.CardIssuer != nil {
		return *x.CardIssuer
	}
	return ""
}

func (x *CardDb) GetLocalBaseRewards() int64 {
	if x != nil && x.LocalBaseRewards != nil {
		return *x.LocalBaseRewards
	}
	return 0
}

func (x *CardDb) GetLocalBaseMiles() float64 {
	if x != nil && x.LocalBaseMiles != nil {
		return *x.LocalBaseMiles
	}
	return 0
}

func (x *CardDb) GetLocalBaseWhitelistCategory() []byte {
	if x != nil {
		return x.LocalBaseWhitelistCategory
	}
	return nil
}

func (x *CardDb) GetLocalBaseBlacklistCategory() []byte {
	if x != nil {
		return x.LocalBaseBlacklistCategory
	}
	return nil
}

func (x *CardDb) GetLocalBonusRewards() int64 {
	if x != nil && x.LocalBonusRewards != nil {
		return *x.LocalBonusRewards
	}
	return 0
}

func (x *CardDb) GetLocalBonusMiles() float64 {
	if x != nil && x.LocalBonusMiles != nil {
		return *x.LocalBonusMiles
	}
	return 0
}

func (x *CardDb) GetLocalBonusWhitelistCategory() []byte {
	if x != nil {
		return x.LocalBonusWhitelistCategory
	}
	return nil
}

func (x *CardDb) GetLocalBonusBlacklistCategory() []byte {
	if x != nil {
		return x.LocalBonusBlacklistCategory
	}
	return nil
}

func (x *CardDb) GetLocalBonusPaymentTypes() []byte {
	if x != nil {
		return x.LocalBonusPaymentTypes
	}
	return nil
}

func (x *CardDb) GetFcyBaseRewards() int64 {
	if x != nil && x.FcyBaseRewards != nil {
		return *x.FcyBaseRewards
	}
	return 0
}

func (x *CardDb) GetFcyBaseMiles() float64 {
	if x != nil && x.FcyBaseMiles != nil {
		return *x.FcyBaseMiles
	}
	return 0
}

func (x *CardDb) GetFcyBaseWhitelistCategory() []byte {
	if x != nil {
		return x.FcyBaseWhitelistCategory
	}
	return nil
}

func (x *CardDb) GetFcyBaseBlacklistCategory() []byte {
	if x != nil {
		return x.FcyBaseBlacklistCategory
	}
	return nil
}

func (x *CardDb) GetFcyBonusRewards() int64 {
	if x != nil && x.FcyBonusRewards != nil {
		return *x.FcyBonusRewards
	}
	return 0
}

func (x *CardDb) GetFcyBonusMiles() float64 {
	if x != nil && x.FcyBonusMiles != nil {
		return *x.FcyBonusMiles
	}
	return 0
}

func (x *CardDb) GetFcyBonusWhitelistCategory() []byte {
	if x != nil {
		return x.FcyBonusWhitelistCategory
	}
	return nil
}

func (x *CardDb) GetFcyBonusBlacklistCategory() []byte {
	if x != nil {
		return x.FcyBonusBlacklistCategory
	}
	return nil
}

func (x *CardDb) GetFcyBonusPaymentTypes() []byte {
	if x != nil {
		return x.FcyBonusPaymentTypes
	}
	return nil
}

func (x *CardDb) GetRounding() int64 {
	if x != nil && x.Rounding != nil {
		return *x.Rounding
	}
	return 0
}

func (x *CardDb) GetAmountBlock() float64 {
	if x != nil && x.AmountBlock != nil {
		return *x.AmountBlock
	}
	return 0
}

func (x *CardDb) GetRewardCurrency() string {
	if x != nil && x.RewardCurrency != nil {
		return *x.RewardCurrency
	}
	return ""
}

func (x *CardDb) GetCapType() int64 {
	if x != nil && x.CapType != nil {
		return *x.CapType
	}
	return 0
}

func (x *CardDb) GetCap() float64 {
	if x != nil && x.Cap != nil {
		return *x.Cap
	}
	return 0
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId              *int64     `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3,oneof" json:"card_id,omitempty"`
	CardName            *string    `protobuf:"bytes,2,opt,name=card_name,json=cardName,proto3,oneof" json:"card_name,omitempty"`
	ShortCardName       *string    `protobuf:"bytes,3,opt,name=short_card_name,json=shortCardName,proto3,oneof" json:"short_card_name,omitempty"`
	CardType            *int64     `protobuf:"varint,4,opt,name=card_type,json=cardType,proto3,oneof" json:"card_type,omitempty"`
	CardImage           *string    `protobuf:"bytes,5,opt,name=card_image,json=cardImage,proto3,oneof" json:"card_image,omitempty"`
	CardIssuer          *string    `protobuf:"bytes,6,opt,name=card_issuer,json=cardIssuer,proto3,oneof" json:"card_issuer,omitempty"`
	LocalBaseRewards    *int64     `protobuf:"varint,7,opt,name=local_base_rewards,json=localBaseRewards,proto3,oneof" json:"local_base_rewards,omitempty"`
	LocalBaseMiles      *float64   `protobuf:"fixed64,8,opt,name=local_base_miles,json=localBaseMiles,proto3,oneof" json:"local_base_miles,omitempty"`
	LocalBaseCardRules  *CardRules `protobuf:"bytes,9,opt,name=local_base_card_rules,json=localBaseCardRules,proto3,oneof" json:"local_base_card_rules,omitempty"`
	LocalBonusRewards   *int64     `protobuf:"varint,10,opt,name=local_bonus_rewards,json=localBonusRewards,proto3,oneof" json:"local_bonus_rewards,omitempty"`
	LocalBonusMiles     *float64   `protobuf:"fixed64,11,opt,name=local_bonus_miles,json=localBonusMiles,proto3,oneof" json:"local_bonus_miles,omitempty"`
	LocalBonusCardRules *CardRules `protobuf:"bytes,12,opt,name=local_bonus_card_rules,json=localBonusCardRules,proto3,oneof" json:"local_bonus_card_rules,omitempty"`
	FcyBaseRewards      *int64     `protobuf:"varint,13,opt,name=fcy_base_rewards,json=fcyBaseRewards,proto3,oneof" json:"fcy_base_rewards,omitempty"`
	FcyBaseMiles        *float64   `protobuf:"fixed64,14,opt,name=fcy_base_miles,json=fcyBaseMiles,proto3,oneof" json:"fcy_base_miles,omitempty"`
	FcyBaseCardRules    *CardRules `protobuf:"bytes,15,opt,name=fcy_base_card_rules,json=fcyBaseCardRules,proto3,oneof" json:"fcy_base_card_rules,omitempty"`
	FcyBonusRewards     *int64     `protobuf:"varint,16,opt,name=fcy_bonus_rewards,json=fcyBonusRewards,proto3,oneof" json:"fcy_bonus_rewards,omitempty"`
	FcyBonusMiles       *float64   `protobuf:"fixed64,17,opt,name=fcy_bonus_miles,json=fcyBonusMiles,proto3,oneof" json:"fcy_bonus_miles,omitempty"`
	FcyBonusCardRules   *CardRules `protobuf:"bytes,18,opt,name=fcy_bonus_card_rules,json=fcyBonusCardRules,proto3,oneof" json:"fcy_bonus_card_rules,omitempty"`
	Rounding            *int64     `protobuf:"varint,19,opt,name=rounding,proto3,oneof" json:"rounding,omitempty"`
	AmountBlock         *float64   `protobuf:"fixed64,20,opt,name=amount_block,json=amountBlock,proto3,oneof" json:"amount_block,omitempty"`
	RewardCurrency      *string    `protobuf:"bytes,21,opt,name=reward_currency,json=rewardCurrency,proto3,oneof" json:"reward_currency,omitempty"`
	CapType             *int64     `protobuf:"varint,22,opt,name=cap_type,json=capType,proto3,oneof" json:"cap_type,omitempty"`
	Cap                 *float64   `protobuf:"fixed64,23,opt,name=cap,proto3,oneof" json:"cap,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{7}
}

func (x *Card) GetCardId() int64 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *Card) GetCardName() string {
	if x != nil && x.CardName != nil {
		return *x.CardName
	}
	return ""
}

func (x *Card) GetShortCardName() string {
	if x != nil && x.ShortCardName != nil {
		return *x.ShortCardName
	}
	return ""
}

func (x *Card) GetCardType() int64 {
	if x != nil && x.CardType != nil {
		return *x.CardType
	}
	return 0
}

func (x *Card) GetCardImage() string {
	if x != nil && x.CardImage != nil {
		return *x.CardImage
	}
	return ""
}

func (x *Card) GetCardIssuer() string {
	if x != nil && x.CardIssuer != nil {
		return *x.CardIssuer
	}
	return ""
}

func (x *Card) GetLocalBaseRewards() int64 {
	if x != nil && x.LocalBaseRewards != nil {
		return *x.LocalBaseRewards
	}
	return 0
}

func (x *Card) GetLocalBaseMiles() float64 {
	if x != nil && x.LocalBaseMiles != nil {
		return *x.LocalBaseMiles
	}
	return 0
}

func (x *Card) GetLocalBaseCardRules() *CardRules {
	if x != nil {
		return x.LocalBaseCardRules
	}
	return nil
}

func (x *Card) GetLocalBonusRewards() int64 {
	if x != nil && x.LocalBonusRewards != nil {
		return *x.LocalBonusRewards
	}
	return 0
}

func (x *Card) GetLocalBonusMiles() float64 {
	if x != nil && x.LocalBonusMiles != nil {
		return *x.LocalBonusMiles
	}
	return 0
}

func (x *Card) GetLocalBonusCardRules() *CardRules {
	if x != nil {
		return x.LocalBonusCardRules
	}
	return nil
}

func (x *Card) GetFcyBaseRewards() int64 {
	if x != nil && x.FcyBaseRewards != nil {
		return *x.FcyBaseRewards
	}
	return 0
}

func (x *Card) GetFcyBaseMiles() float64 {
	if x != nil && x.FcyBaseMiles != nil {
		return *x.FcyBaseMiles
	}
	return 0
}

func (x *Card) GetFcyBaseCardRules() *CardRules {
	if x != nil {
		return x.FcyBaseCardRules
	}
	return nil
}

func (x *Card) GetFcyBonusRewards() int64 {
	if x != nil && x.FcyBonusRewards != nil {
		return *x.FcyBonusRewards
	}
	return 0
}

func (x *Card) GetFcyBonusMiles() float64 {
	if x != nil && x.FcyBonusMiles != nil {
		return *x.FcyBonusMiles
	}
	return 0
}

func (x *Card) GetFcyBonusCardRules() *CardRules {
	if x != nil {
		return x.FcyBonusCardRules
	}
	return nil
}

func (x *Card) GetRounding() int64 {
	if x != nil && x.Rounding != nil {
		return *x.Rounding
	}
	return 0
}

func (x *Card) GetAmountBlock() float64 {
	if x != nil && x.AmountBlock != nil {
		return *x.AmountBlock
	}
	return 0
}

func (x *Card) GetRewardCurrency() string {
	if x != nil && x.RewardCurrency != nil {
		return *x.RewardCurrency
	}
	return ""
}

func (x *Card) GetCapType() int64 {
	if x != nil && x.CapType != nil {
		return *x.CapType
	}
	return 0
}

func (x *Card) GetCap() float64 {
	if x != nil && x.Cap != nil {
		return *x.Cap
	}
	return 0
}

type UserCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           *int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	CardId           *int64  `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3,oneof" json:"card_id,omitempty"`
	CardNickname     *string `protobuf:"bytes,3,opt,name=card_nickname,json=cardNickname,proto3,oneof" json:"card_nickname,omitempty"`
	CardStatus       *int64  `protobuf:"varint,4,opt,name=card_status,json=cardStatus,proto3,oneof" json:"card_status,omitempty"`
	CardExpiry       *int64  `protobuf:"varint,5,opt,name=card_expiry,json=cardExpiry,proto3,oneof" json:"card_expiry,omitempty"`
	AddedTimestamp   *int64  `protobuf:"varint,6,opt,name=added_timestamp,json=addedTimestamp,proto3,oneof" json:"added_timestamp,omitempty"`
	UpdatedTimestamp *int64  `protobuf:"varint,7,opt,name=updated_timestamp,json=updatedTimestamp,proto3,oneof" json:"updated_timestamp,omitempty"`
}

func (x *UserCard) Reset() {
	*x = UserCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCard) ProtoMessage() {}

func (x *UserCard) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCard.ProtoReflect.Descriptor instead.
func (*UserCard) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{8}
}

func (x *UserCard) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *UserCard) GetCardId() int64 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *UserCard) GetCardNickname() string {
	if x != nil && x.CardNickname != nil {
		return *x.CardNickname
	}
	return ""
}

func (x *UserCard) GetCardStatus() int64 {
	if x != nil && x.CardStatus != nil {
		return *x.CardStatus
	}
	return 0
}

func (x *UserCard) GetCardExpiry() int64 {
	if x != nil && x.CardExpiry != nil {
		return *x.CardExpiry
	}
	return 0
}

func (x *UserCard) GetAddedTimestamp() int64 {
	if x != nil && x.AddedTimestamp != nil {
		return *x.AddedTimestamp
	}
	return 0
}

func (x *UserCard) GetUpdatedTimestamp() int64 {
	if x != nil && x.UpdatedTimestamp != nil {
		return *x.UpdatedTimestamp
	}
	return 0
}

type TransactionDb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                 *int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	Description            *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Category               *int64  `protobuf:"varint,3,opt,name=category,proto3,oneof" json:"category,omitempty"`
	PaymentType            *int64  `protobuf:"varint,4,opt,name=payment_type,json=paymentType,proto3,oneof" json:"payment_type,omitempty"`
	Amount                 *int64  `protobuf:"varint,5,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	AmountConverted        *int64  `protobuf:"varint,6,opt,name=amount_converted,json=amountConverted,proto3,oneof" json:"amount_converted,omitempty"`
	Currency               *string `protobuf:"bytes,7,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	TransactionTimestamp   *int64  `protobuf:"varint,8,opt,name=transaction_timestamp,json=transactionTimestamp,proto3,oneof" json:"transaction_timestamp,omitempty"`
	CreateTimestamp        *int64  `protobuf:"varint,9,opt,name=create_timestamp,json=createTimestamp,proto3,oneof" json:"create_timestamp,omitempty"`
	UpdateTimestamp        *int64  `protobuf:"varint,10,opt,name=update_timestamp,json=updateTimestamp,proto3,oneof" json:"update_timestamp,omitempty"`
	CardId                 *int64  `protobuf:"varint,11,opt,name=card_id,json=cardId,proto3,oneof" json:"card_id,omitempty"`
	IsCancel               *int64  `protobuf:"varint,12,opt,name=is_cancel,json=isCancel,proto3,oneof" json:"is_cancel,omitempty"`
	BaseMilesEarned        *int64  `protobuf:"varint,13,opt,name=base_miles_earned,json=baseMilesEarned,proto3,oneof" json:"base_miles_earned,omitempty"`
	BonusMilesEarned       *int64  `protobuf:"varint,14,opt,name=bonus_miles_earned,json=bonusMilesEarned,proto3,oneof" json:"bonus_miles_earned,omitempty"`
	BaseRewardsEarned      *int64  `protobuf:"varint,15,opt,name=base_rewards_earned,json=baseRewardsEarned,proto3,oneof" json:"base_rewards_earned,omitempty"`
	BonusRewardsEarned     *int64  `protobuf:"varint,16,opt,name=bonus_rewards_earned,json=bonusRewardsEarned,proto3,oneof" json:"bonus_rewards_earned,omitempty"`
	IsPromotion            *int64  `protobuf:"varint,17,opt,name=is_promotion,json=isPromotion,proto3,oneof" json:"is_promotion,omitempty"`
	PromotionId            *int64  `protobuf:"varint,18,opt,name=promotion_id,json=promotionId,proto3,oneof" json:"promotion_id,omitempty"`
	PromotionMilesEarned   *int64  `protobuf:"varint,19,opt,name=promotion_miles_earned,json=promotionMilesEarned,proto3,oneof" json:"promotion_miles_earned,omitempty"`
	PromotionRewardsEarned *int64  `protobuf:"varint,20,opt,name=promotion_rewards_earned,json=promotionRewardsEarned,proto3,oneof" json:"promotion_rewards_earned,omitempty"`
}

func (x *TransactionDb) Reset() {
	*x = TransactionDb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionDb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDb) ProtoMessage() {}

func (x *TransactionDb) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDb.ProtoReflect.Descriptor instead.
func (*TransactionDb) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{9}
}

func (x *TransactionDb) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *TransactionDb) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TransactionDb) GetCategory() int64 {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return 0
}

func (x *TransactionDb) GetPaymentType() int64 {
	if x != nil && x.PaymentType != nil {
		return *x.PaymentType
	}
	return 0
}

func (x *TransactionDb) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *TransactionDb) GetAmountConverted() int64 {
	if x != nil && x.AmountConverted != nil {
		return *x.AmountConverted
	}
	return 0
}

func (x *TransactionDb) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *TransactionDb) GetTransactionTimestamp() int64 {
	if x != nil && x.TransactionTimestamp != nil {
		return *x.TransactionTimestamp
	}
	return 0
}

func (x *TransactionDb) GetCreateTimestamp() int64 {
	if x != nil && x.CreateTimestamp != nil {
		return *x.CreateTimestamp
	}
	return 0
}

func (x *TransactionDb) GetUpdateTimestamp() int64 {
	if x != nil && x.UpdateTimestamp != nil {
		return *x.UpdateTimestamp
	}
	return 0
}

func (x *TransactionDb) GetCardId() int64 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *TransactionDb) GetIsCancel() int64 {
	if x != nil && x.IsCancel != nil {
		return *x.IsCancel
	}
	return 0
}

func (x *TransactionDb) GetBaseMilesEarned() int64 {
	if x != nil && x.BaseMilesEarned != nil {
		return *x.BaseMilesEarned
	}
	return 0
}

func (x *TransactionDb) GetBonusMilesEarned() int64 {
	if x != nil && x.BonusMilesEarned != nil {
		return *x.BonusMilesEarned
	}
	return 0
}

func (x *TransactionDb) GetBaseRewardsEarned() int64 {
	if x != nil && x.BaseRewardsEarned != nil {
		return *x.BaseRewardsEarned
	}
	return 0
}

func (x *TransactionDb) GetBonusRewardsEarned() int64 {
	if x != nil && x.BonusRewardsEarned != nil {
		return *x.BonusRewardsEarned
	}
	return 0
}

func (x *TransactionDb) GetIsPromotion() int64 {
	if x != nil && x.IsPromotion != nil {
		return *x.IsPromotion
	}
	return 0
}

func (x *TransactionDb) GetPromotionId() int64 {
	if x != nil && x.PromotionId != nil {
		return *x.PromotionId
	}
	return 0
}

func (x *TransactionDb) GetPromotionMilesEarned() int64 {
	if x != nil && x.PromotionMilesEarned != nil {
		return *x.PromotionMilesEarned
	}
	return 0
}

func (x *TransactionDb) GetPromotionRewardsEarned() int64 {
	if x != nil && x.PromotionRewardsEarned != nil {
		return *x.PromotionRewardsEarned
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *string `protobuf:"bytes,1,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Category    *int64  `protobuf:"varint,2,opt,name=category,proto3,oneof" json:"category,omitempty"`
	PaymentType *int64  `protobuf:"varint,3,opt,name=payment_type,json=paymentType,proto3,oneof" json:"payment_type,omitempty"`
	Amount      *int64  `protobuf:"varint,4,opt,name=amount,proto3,oneof" json:"amount,omitempty"`
	Currency    *string `protobuf:"bytes,5,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	Time        *int64  `protobuf:"varint,6,opt,name=time,proto3,oneof" json:"time,omitempty"`
	CardId      *int64  `protobuf:"varint,7,opt,name=card_id,json=cardId,proto3,oneof" json:"card_id,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{10}
}

func (x *Transaction) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Transaction) GetCategory() int64 {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return 0
}

func (x *Transaction) GetPaymentType() int64 {
	if x != nil && x.PaymentType != nil {
		return *x.PaymentType
	}
	return 0
}

func (x *Transaction) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *Transaction) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *Transaction) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *Transaction) GetCardId() int64 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

type CurrentSpending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSpending    *int64 `protobuf:"varint,1,opt,name=total_spending,json=totalSpending,proto3,oneof" json:"total_spending,omitempty"`
	TransactionCount *int64 `protobuf:"varint,2,opt,name=transaction_count,json=transactionCount,proto3,oneof" json:"transaction_count,omitempty"`
}

func (x *CurrentSpending) Reset() {
	*x = CurrentSpending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentSpending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentSpending) ProtoMessage() {}

func (x *CurrentSpending) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentSpending.ProtoReflect.Descriptor instead.
func (*CurrentSpending) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{11}
}

func (x *CurrentSpending) GetTotalSpending() int64 {
	if x != nil && x.TotalSpending != nil {
		return *x.TotalSpending
	}
	return 0
}

func (x *CurrentSpending) GetTransactionCount() int64 {
	if x != nil && x.TransactionCount != nil {
		return *x.TransactionCount
	}
	return 0
}

type CalculatedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseMilesEarned        *float64 `protobuf:"fixed64,1,opt,name=base_miles_earned,json=baseMilesEarned,proto3,oneof" json:"base_miles_earned,omitempty"`
	BonusMilesEarned       *float64 `protobuf:"fixed64,2,opt,name=bonus_miles_earned,json=bonusMilesEarned,proto3,oneof" json:"bonus_miles_earned,omitempty"`
	BaseRewardsEarned      *float64 `protobuf:"fixed64,3,opt,name=base_rewards_earned,json=baseRewardsEarned,proto3,oneof" json:"base_rewards_earned,omitempty"`
	BonusRewardsEarned     *float64 `protobuf:"fixed64,4,opt,name=bonus_rewards_earned,json=bonusRewardsEarned,proto3,oneof" json:"bonus_rewards_earned,omitempty"`
	IsPromotion            *bool    `protobuf:"varint,5,opt,name=is_promotion,json=isPromotion,proto3,oneof" json:"is_promotion,omitempty"`
	PromotionId            *int64   `protobuf:"varint,6,opt,name=promotion_id,json=promotionId,proto3,oneof" json:"promotion_id,omitempty"`
	PromotionMilesEarned   *int64   `protobuf:"varint,7,opt,name=promotion_miles_earned,json=promotionMilesEarned,proto3,oneof" json:"promotion_miles_earned,omitempty"`
	PromotionRewardsEarned *int64   `protobuf:"varint,8,opt,name=promotion_rewards_earned,json=promotionRewardsEarned,proto3,oneof" json:"promotion_rewards_earned,omitempty"`
}

func (x *CalculatedTransaction) Reset() {
	*x = CalculatedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedTransaction) ProtoMessage() {}

func (x *CalculatedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedTransaction.ProtoReflect.Descriptor instead.
func (*CalculatedTransaction) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{12}
}

func (x *CalculatedTransaction) GetBaseMilesEarned() float64 {
	if x != nil && x.BaseMilesEarned != nil {
		return *x.BaseMilesEarned
	}
	return 0
}

func (x *CalculatedTransaction) GetBonusMilesEarned() float64 {
	if x != nil && x.BonusMilesEarned != nil {
		return *x.BonusMilesEarned
	}
	return 0
}

func (x *CalculatedTransaction) GetBaseRewardsEarned() float64 {
	if x != nil && x.BaseRewardsEarned != nil {
		return *x.BaseRewardsEarned
	}
	return 0
}

func (x *CalculatedTransaction) GetBonusRewardsEarned() float64 {
	if x != nil && x.BonusRewardsEarned != nil {
		return *x.BonusRewardsEarned
	}
	return 0
}

func (x *CalculatedTransaction) GetIsPromotion() bool {
	if x != nil && x.IsPromotion != nil {
		return *x.IsPromotion
	}
	return false
}

func (x *CalculatedTransaction) GetPromotionId() int64 {
	if x != nil && x.PromotionId != nil {
		return *x.PromotionId
	}
	return 0
}

func (x *CalculatedTransaction) GetPromotionMilesEarned() int64 {
	if x != nil && x.PromotionMilesEarned != nil {
		return *x.PromotionMilesEarned
	}
	return 0
}

func (x *CalculatedTransaction) GetPromotionRewardsEarned() int64 {
	if x != nil && x.PromotionRewardsEarned != nil {
		return *x.PromotionRewardsEarned
	}
	return 0
}

type AddTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta        *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	UserId             *int64       `protobuf:"varint,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	TransactionDetails *Transaction `protobuf:"bytes,3,opt,name=transaction_details,json=transactionDetails,proto3,oneof" json:"transaction_details,omitempty"`
}

func (x *AddTransactionRequest) Reset() {
	*x = AddTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransactionRequest) ProtoMessage() {}

func (x *AddTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransactionRequest.ProtoReflect.Descriptor instead.
func (*AddTransactionRequest) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{13}
}

func (x *AddTransactionRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *AddTransactionRequest) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *AddTransactionRequest) GetTransactionDetails() *Transaction {
	if x != nil {
		return x.TransactionDetails
	}
	return nil
}

type AddTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
}

func (x *AddTransactionResponse) Reset() {
	*x = AddTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransactionResponse) ProtoMessage() {}

func (x *AddTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransactionResponse.ProtoReflect.Descriptor instead.
func (*AddTransactionResponse) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{14}
}

func (x *AddTransactionResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

type CalculateTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta        *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	UserId             *int64       `protobuf:"varint,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	TransactionDetails *Transaction `protobuf:"bytes,3,opt,name=transaction_details,json=transactionDetails,proto3,oneof" json:"transaction_details,omitempty"`
}

func (x *CalculateTransactionRequest) Reset() {
	*x = CalculateTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTransactionRequest) ProtoMessage() {}

func (x *CalculateTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTransactionRequest.ProtoReflect.Descriptor instead.
func (*CalculateTransactionRequest) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{15}
}

func (x *CalculateTransactionRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *CalculateTransactionRequest) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *CalculateTransactionRequest) GetTransactionDetails() *Transaction {
	if x != nil {
		return x.TransactionDetails
	}
	return nil
}

type CalculateTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta          *ResponseMeta          `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	CalculatedTransaction *CalculatedTransaction `protobuf:"bytes,2,opt,name=calculated_transaction,json=calculatedTransaction,proto3,oneof" json:"calculated_transaction,omitempty"`
}

func (x *CalculateTransactionResponse) Reset() {
	*x = CalculateTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTransactionResponse) ProtoMessage() {}

func (x *CalculateTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTransactionResponse.ProtoReflect.Descriptor instead.
func (*CalculateTransactionResponse) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{16}
}

func (x *CalculateTransactionResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *CalculateTransactionResponse) GetCalculatedTransaction() *CalculatedTransaction {
	if x != nil {
		return x.CalculatedTransaction
	}
	return nil
}

type PairUserCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta  *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	UserId       *int64       `protobuf:"varint,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	CardId       *int64       `protobuf:"varint,3,opt,name=card_id,json=cardId,proto3,oneof" json:"card_id,omitempty"`
	CardNickname *string      `protobuf:"bytes,4,opt,name=card_nickname,json=cardNickname,proto3,oneof" json:"card_nickname,omitempty"`
	CardExpiry   *int64       `protobuf:"varint,5,opt,name=card_expiry,json=cardExpiry,proto3,oneof" json:"card_expiry,omitempty"`
}

func (x *PairUserCardRequest) Reset() {
	*x = PairUserCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairUserCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairUserCardRequest) ProtoMessage() {}

func (x *PairUserCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairUserCardRequest.ProtoReflect.Descriptor instead.
func (*PairUserCardRequest) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{17}
}

func (x *PairUserCardRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *PairUserCardRequest) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *PairUserCardRequest) GetCardId() int64 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

func (x *PairUserCardRequest) GetCardNickname() string {
	if x != nil && x.CardNickname != nil {
		return *x.CardNickname
	}
	return ""
}

func (x *PairUserCardRequest) GetCardExpiry() int64 {
	if x != nil && x.CardExpiry != nil {
		return *x.CardExpiry
	}
	return 0
}

type PairUserCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta  *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	UserCardsList []*UserCard   `protobuf:"bytes,2,rep,name=user_cards_list,json=userCardsList,proto3" json:"user_cards_list,omitempty"`
}

func (x *PairUserCardResponse) Reset() {
	*x = PairUserCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairUserCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairUserCardResponse) ProtoMessage() {}

func (x *PairUserCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairUserCardResponse.ProtoReflect.Descriptor instead.
func (*PairUserCardResponse) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{18}
}

func (x *PairUserCardResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *PairUserCardResponse) GetUserCardsList() []*UserCard {
	if x != nil {
		return x.UserCardsList
	}
	return nil
}

type GetUserCardsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardStatuses []int64 `protobuf:"varint,2,rep,packed,name=card_statuses,json=cardStatuses,proto3" json:"card_statuses,omitempty"`
	IsExpired    *bool   `protobuf:"varint,4,opt,name=is_expired,json=isExpired,proto3,oneof" json:"is_expired,omitempty"`
}

func (x *GetUserCardsFilter) Reset() {
	*x = GetUserCardsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCardsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCardsFilter) ProtoMessage() {}

func (x *GetUserCardsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCardsFilter.ProtoReflect.Descriptor instead.
func (*GetUserCardsFilter) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{19}
}

func (x *GetUserCardsFilter) GetCardStatuses() []int64 {
	if x != nil {
		return x.CardStatuses
	}
	return nil
}

func (x *GetUserCardsFilter) GetIsExpired() bool {
	if x != nil && x.IsExpired != nil {
		return *x.IsExpired
	}
	return false
}

type GetUserCardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta        `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	UserId      *int64              `protobuf:"varint,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	OrderBy     *int64              `protobuf:"varint,3,opt,name=order_by,json=orderBy,proto3,oneof" json:"order_by,omitempty"`
	Direction   *int64              `protobuf:"varint,4,opt,name=direction,proto3,oneof" json:"direction,omitempty"`
	Filter      *GetUserCardsFilter `protobuf:"bytes,5,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}

func (x *GetUserCardsRequest) Reset() {
	*x = GetUserCardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCardsRequest) ProtoMessage() {}

func (x *GetUserCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCardsRequest.ProtoReflect.Descriptor instead.
func (*GetUserCardsRequest) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{20}
}

func (x *GetUserCardsRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetUserCardsRequest) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *GetUserCardsRequest) GetOrderBy() int64 {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return 0
}

func (x *GetUserCardsRequest) GetDirection() int64 {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return 0
}

func (x *GetUserCardsRequest) GetFilter() *GetUserCardsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetUserCardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta  *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	UserCardsList []*UserCard   `protobuf:"bytes,2,rep,name=user_cards_list,json=userCardsList,proto3" json:"user_cards_list,omitempty"`
}

func (x *GetUserCardsResponse) Reset() {
	*x = GetUserCardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCardsResponse) ProtoMessage() {}

func (x *GetUserCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCardsResponse.ProtoReflect.Descriptor instead.
func (*GetUserCardsResponse) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{21}
}

func (x *GetUserCardsResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetUserCardsResponse) GetUserCardsList() []*UserCard {
	if x != nil {
		return x.UserCardsList
	}
	return nil
}

type AddCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	CardDetails *Card        `protobuf:"bytes,2,opt,name=card_details,json=cardDetails,proto3,oneof" json:"card_details,omitempty"`
}

func (x *AddCardRequest) Reset() {
	*x = AddCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCardRequest) ProtoMessage() {}

func (x *AddCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCardRequest.ProtoReflect.Descriptor instead.
func (*AddCardRequest) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{22}
}

func (x *AddCardRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *AddCardRequest) GetCardDetails() *Card {
	if x != nil {
		return x.CardDetails
	}
	return nil
}

type AddCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	CardId       *int64        `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3,oneof" json:"card_id,omitempty"`
}

func (x *AddCardResponse) Reset() {
	*x = AddCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rewards_tracker_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCardResponse) ProtoMessage() {}

func (x *AddCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rewards_tracker_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCardResponse.ProtoReflect.Descriptor instead.
func (*AddCardResponse) Descriptor() ([]byte, []int) {
	return file_rewards_tracker_proto_rawDescGZIP(), []int{23}
}

func (x *AddCardResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *AddCardResponse) GetCardId() int64 {
	if x != nil && x.CardId != nil {
		return *x.CardId
	}
	return 0
}

var File_rewards_tracker_proto protoreflect.FileDescriptor

var file_rewards_tracker_proto_rawDesc = []byte{
	0x0a, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x22, 0x32, 0x0a, 0x0b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x6f, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x22, 0x7d, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xc7, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x22, 0x34, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x1b, 0x0a, 0x05, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcb, 0x03, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x13, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x48, 0x01, 0x52, 0x13, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x17, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x48, 0x02, 0x52, 0x15, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x56, 0x0a, 0x17, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x48, 0x03,
	0x52, 0x15, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x22, 0xd7, 0x10, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x44, 0x62, 0x12,
	0x1c, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61,
	0x73, 0x65, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x08, 0x52, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x1a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6d,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x0f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x1e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0c, 0x52, 0x1b, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1e, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x0d, 0x52, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0e, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0f,
	0x52, 0x0e, 0x66, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x0c, 0x66,
	0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x1b, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x11, 0x52, 0x18, 0x66, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x12, 0x52, 0x18, 0x66, 0x63, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x13, 0x52, 0x0f, 0x66, 0x63, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x63, 0x79, 0x5f, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x14, 0x52, 0x0d, 0x66, 0x63, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x69, 0x6c, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x15, 0x52, 0x19, 0x66, 0x63,
	0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x66, 0x63,
	0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x16, 0x52, 0x19, 0x66, 0x63, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x17, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x17, 0x52, 0x14, 0x66, 0x63, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x18,
	0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x19, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a,
	0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1b, 0x52, 0x07, 0x63, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x1c, 0x52, 0x03, 0x63, 0x61, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65,
	0x73, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x69,
	0x6c, 0x65, 0x73, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x63, 0x79, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x1e, 0x0a, 0x1c, 0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42,
	0x1e, 0x0a, 0x1c, 0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x66, 0x63,
	0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x66,
	0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x61, 0x70, 0x22, 0x99,
	0x0c, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x10,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x07, 0x52,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x55, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x48, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52, 0x0f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x57, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x0b,
	0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x66, 0x63, 0x79, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x0c, 0x52, 0x0e, 0x66, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x63, 0x79, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0d, 0x52, 0x0c, 0x66, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x51, 0x0a, 0x13, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x0e,
	0x52, 0x10, 0x66, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0f, 0x52, 0x0f, 0x66, 0x63, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x10, 0x52, 0x0d, 0x66, 0x63, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x69, 0x6c, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x14, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x48, 0x11, 0x52, 0x11, 0x66, 0x63, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x12, 0x52, 0x08, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x13, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x15, 0x52, 0x07, 0x63, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x48, 0x16, 0x52, 0x03,
	0x63, 0x61, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x6d, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x63, 0x79,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x63, 0x79, 0x5f, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66,
	0x63, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x61, 0x70, 0x22, 0xd4, 0x03, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x61,
	0x72, 0x64, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x05, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x06, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x22, 0x42, 0x0a, 0x0a, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xfc, 0x09, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x62, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07,
	0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x06, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x08, 0x69, 0x73,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x69, 0x6c, 0x65,
	0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0d, 0x52, 0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x4d,
	0x69, 0x6c, 0x65, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x13, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x11, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0f, 0x52, 0x12, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x10, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x48, 0x12, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x13, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69,
	0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x22, 0xcd, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x22, 0x98, 0x01, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe9, 0x04, 0x0a, 0x15,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x6d, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x01, 0x52, 0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x4d, 0x69, 0x6c, 0x65, 0x73,
	0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x11, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x14, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x12,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0b, 0x69,
	0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x07, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f,
	0x6d, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x76, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xc2, 0x02, 0x0a,
	0x1b, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x02, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x22, 0x30, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0xfe, 0x01, 0x0a, 0x1c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x65,
	0x0a, 0x16, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x15, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9e, 0x03, 0x0a, 0x13, 0x50, 0x61, 0x69, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x02, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04,
	0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x88, 0x01, 0x01, 0x22,
	0x67, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41,
	0x49, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x69, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x22, 0x6c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0xd1,
	0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x43, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x22, 0x30, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0x56, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x59, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22,
	0x86, 0x02, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x48, 0x01, 0x52, 0x0b, 0x63,
	0x61, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x22, 0x47, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x2a, 0xfb, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c,
	0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x49, 0x52, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44, 0x55, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x49, 0x44,
	0x45, 0x5f, 0x48, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x47,
	0x52, 0x4f, 0x43, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x4f,
	0x54, 0x45, 0x4c, 0x53, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4f, 0x53, 0x50, 0x49, 0x54,
	0x41, 0x4c, 0x53, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x4c, 0x43,
	0x4f, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53,
	0x10, 0x0e, 0x2a, 0x44, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48, 0x49, 0x50, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x2a, 0x29, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x2a, 0x42, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x43, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x50, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x02, 0x2a, 0x3c, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x02, 0x2a, 0x1c, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53,
	0x43, 0x10, 0x01, 0x2a, 0x40, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x42,
	0x49, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x12, 0x5a, 0x10, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_rewards_tracker_proto_rawDescOnce sync.Once
	file_rewards_tracker_proto_rawDescData = file_rewards_tracker_proto_rawDesc
)

func file_rewards_tracker_proto_rawDescGZIP() []byte {
	file_rewards_tracker_proto_rawDescOnce.Do(func() {
		file_rewards_tracker_proto_rawDescData = protoimpl.X.CompressGZIP(file_rewards_tracker_proto_rawDescData)
	})
	return file_rewards_tracker_proto_rawDescData
}

var file_rewards_tracker_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_rewards_tracker_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_rewards_tracker_proto_goTypes = []interface{}{
	(CardCategory)(0),        // 0: rewards_tracker.pb.CardCategory
	(CardPaymentType)(0),     // 1: rewards_tracker.pb.CardPaymentType
	(CardRounding)(0),        // 2: rewards_tracker.pb.CardRounding
	(CardCapType)(0),         // 3: rewards_tracker.pb.CardCapType
	(CardType)(0),            // 4: rewards_tracker.pb.CardType
	(OrderBy)(0),             // 5: rewards_tracker.pb.OrderBy
	(ErrorCode)(0),           // 6: rewards_tracker.pb.ErrorCode
	(User_ErrorCode)(0),      // 7: rewards_tracker.pb.User.ErrorCode
	(UserCard_CardStatus)(0), // 8: rewards_tracker.pb.UserCard.CardStatus
	(CalculateTransactionRequest_ErrorCode)(0), // 9: rewards_tracker.pb.CalculateTransactionRequest.ErrorCode
	(PairUserCardRequest_ErrorCode)(0),         // 10: rewards_tracker.pb.PairUserCardRequest.ErrorCode
	(GetUserCardsRequest_ErrorCode)(0),         // 11: rewards_tracker.pb.GetUserCardsRequest.ErrorCode
	(GetUserCardsRequest_OrderByField)(0),      // 12: rewards_tracker.pb.GetUserCardsRequest.OrderByField
	(AddCardRequest_ErrorCode)(0),              // 13: rewards_tracker.pb.AddCardRequest.ErrorCode
	(*RequestMeta)(nil),                        // 14: rewards_tracker.pb.RequestMeta
	(*GenericResponse)(nil),                    // 15: rewards_tracker.pb.GenericResponse
	(*ResponseMeta)(nil),                       // 16: rewards_tracker.pb.ResponseMeta
	(*User)(nil),                               // 17: rewards_tracker.pb.User
	(*Lists)(nil),                              // 18: rewards_tracker.pb.Lists
	(*CardRules)(nil),                          // 19: rewards_tracker.pb.CardRules
	(*CardDb)(nil),                             // 20: rewards_tracker.pb.CardDb
	(*Card)(nil),                               // 21: rewards_tracker.pb.Card
	(*UserCard)(nil),                           // 22: rewards_tracker.pb.UserCard
	(*TransactionDb)(nil),                      // 23: rewards_tracker.pb.TransactionDb
	(*Transaction)(nil),                        // 24: rewards_tracker.pb.Transaction
	(*CurrentSpending)(nil),                    // 25: rewards_tracker.pb.CurrentSpending
	(*CalculatedTransaction)(nil),              // 26: rewards_tracker.pb.CalculatedTransaction
	(*AddTransactionRequest)(nil),              // 27: rewards_tracker.pb.AddTransactionRequest
	(*AddTransactionResponse)(nil),             // 28: rewards_tracker.pb.AddTransactionResponse
	(*CalculateTransactionRequest)(nil),        // 29: rewards_tracker.pb.CalculateTransactionRequest
	(*CalculateTransactionResponse)(nil),       // 30: rewards_tracker.pb.CalculateTransactionResponse
	(*PairUserCardRequest)(nil),                // 31: rewards_tracker.pb.PairUserCardRequest
	(*PairUserCardResponse)(nil),               // 32: rewards_tracker.pb.PairUserCardResponse
	(*GetUserCardsFilter)(nil),                 // 33: rewards_tracker.pb.GetUserCardsFilter
	(*GetUserCardsRequest)(nil),                // 34: rewards_tracker.pb.GetUserCardsRequest
	(*GetUserCardsResponse)(nil),               // 35: rewards_tracker.pb.GetUserCardsResponse
	(*AddCardRequest)(nil),                     // 36: rewards_tracker.pb.AddCardRequest
	(*AddCardResponse)(nil),                    // 37: rewards_tracker.pb.AddCardResponse
}
var file_rewards_tracker_proto_depIdxs = []int32{
	16, // 0: rewards_tracker.pb.GenericResponse.response_meta:type_name -> rewards_tracker.pb.ResponseMeta
	18, // 1: rewards_tracker.pb.CardRules.whitelist_categories:type_name -> rewards_tracker.pb.Lists
	18, // 2: rewards_tracker.pb.CardRules.blacklist_categories:type_name -> rewards_tracker.pb.Lists
	18, // 3: rewards_tracker.pb.CardRules.whitelist_payment_types:type_name -> rewards_tracker.pb.Lists
	18, // 4: rewards_tracker.pb.CardRules.blacklist_payment_types:type_name -> rewards_tracker.pb.Lists
	19, // 5: rewards_tracker.pb.Card.local_base_card_rules:type_name -> rewards_tracker.pb.CardRules
	19, // 6: rewards_tracker.pb.Card.local_bonus_card_rules:type_name -> rewards_tracker.pb.CardRules
	19, // 7: rewards_tracker.pb.Card.fcy_base_card_rules:type_name -> rewards_tracker.pb.CardRules
	19, // 8: rewards_tracker.pb.Card.fcy_bonus_card_rules:type_name -> rewards_tracker.pb.CardRules
	14, // 9: rewards_tracker.pb.AddTransactionRequest.request_meta:type_name -> rewards_tracker.pb.RequestMeta
	24, // 10: rewards_tracker.pb.AddTransactionRequest.transaction_details:type_name -> rewards_tracker.pb.Transaction
	16, // 11: rewards_tracker.pb.AddTransactionResponse.response_meta:type_name -> rewards_tracker.pb.ResponseMeta
	14, // 12: rewards_tracker.pb.CalculateTransactionRequest.request_meta:type_name -> rewards_tracker.pb.RequestMeta
	24, // 13: rewards_tracker.pb.CalculateTransactionRequest.transaction_details:type_name -> rewards_tracker.pb.Transaction
	16, // 14: rewards_tracker.pb.CalculateTransactionResponse.response_meta:type_name -> rewards_tracker.pb.ResponseMeta
	26, // 15: rewards_tracker.pb.CalculateTransactionResponse.calculated_transaction:type_name -> rewards_tracker.pb.CalculatedTransaction
	14, // 16: rewards_tracker.pb.PairUserCardRequest.request_meta:type_name -> rewards_tracker.pb.RequestMeta
	16, // 17: rewards_tracker.pb.PairUserCardResponse.response_meta:type_name -> rewards_tracker.pb.ResponseMeta
	22, // 18: rewards_tracker.pb.PairUserCardResponse.user_cards_list:type_name -> rewards_tracker.pb.UserCard
	14, // 19: rewards_tracker.pb.GetUserCardsRequest.request_meta:type_name -> rewards_tracker.pb.RequestMeta
	33, // 20: rewards_tracker.pb.GetUserCardsRequest.filter:type_name -> rewards_tracker.pb.GetUserCardsFilter
	16, // 21: rewards_tracker.pb.GetUserCardsResponse.response_meta:type_name -> rewards_tracker.pb.ResponseMeta
	22, // 22: rewards_tracker.pb.GetUserCardsResponse.user_cards_list:type_name -> rewards_tracker.pb.UserCard
	14, // 23: rewards_tracker.pb.AddCardRequest.request_meta:type_name -> rewards_tracker.pb.RequestMeta
	21, // 24: rewards_tracker.pb.AddCardRequest.card_details:type_name -> rewards_tracker.pb.Card
	16, // 25: rewards_tracker.pb.AddCardResponse.response_meta:type_name -> rewards_tracker.pb.ResponseMeta
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_rewards_tracker_proto_init() }
func file_rewards_tracker_proto_init() {
	if File_rewards_tracker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rewards_tracker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardDb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionDb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentSpending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairUserCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairUserCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCardsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rewards_tracker_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rewards_tracker_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_rewards_tracker_proto_msgTypes[23].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rewards_tracker_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rewards_tracker_proto_goTypes,
		DependencyIndexes: file_rewards_tracker_proto_depIdxs,
		EnumInfos:         file_rewards_tracker_proto_enumTypes,
		MessageInfos:      file_rewards_tracker_proto_msgTypes,
	}.Build()
	File_rewards_tracker_proto = out.File
	file_rewards_tracker_proto_rawDesc = nil
	file_rewards_tracker_proto_goTypes = nil
	file_rewards_tracker_proto_depIdxs = nil
}
